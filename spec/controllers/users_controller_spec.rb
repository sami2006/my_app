require 'spec_helper'
require 'rest_client'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {name: "Test1", email: "test1@gmail.com"}
  end

  def valid_attributes2
    {name: "Test2", email: "test2@gmail.com"}
  end
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  #response = RestClient.get 'http://localhost:3000/users.json'
  #info = JSON::parse(response)
  #pp info.size
  #pp info[0]['name']

  describe "GET index" do
    it "retrieves all users as json objects" do
      user1 = User.create! valid_attributes
      user2 = User.create(name: "Test2", email: "test2@gmail.com")#! valid_attributes2
      resp = get :index, {format: "json"}, valid_session
      json_resp = JSON::parse(resp.body)
      json_resp.size.should == 2
      json_resp[0]['email'].should == user1.email
      json_resp[0]['name'].should == user1.name
      json_resp[1]['email'].should == user2.email
      json_resp[1]['name'].should == user2.name
      #puts json_str.size
      #puts json_str[0]['email']
      #resp.body.should eq("")
      #puts resp.body

      #user = User.create! valid_attributes
      #response = get :index, {:format => "format.json"}, valid_session
      #pp "---------------------"
      #myusers = assigns(:users) # .should eq([user])
      #pp myusers.to_s
      #pp response
      # pp response[:users].to_str
    end
  end

  describe "GET show" do
    it "able to retrieve a user object when requesting by ID" do
      user = User.create! valid_attributes
      resp = get :show, {:id => user.to_param, format: "json"}, valid_session
      json_resp = JSON::parse(resp.body)
      #pp json_resp.to_s
      #json_resp.size.should == 1
      json_resp['email'].should == user.email
      json_resp['name'].should == user.name
      #resp = get :show, {:id => 2, format: "json"}, valid_session
      #resp.should_not be_valid
      #json_resp['name'].should == "Test1"
      #assigns(:user).should eq(user)
    end
  end

  describe "GET new" do
    it "assigns a new user as @user" do
      resp = get :new, {format: "json"}, valid_session
      assigns(:user).should be_a_new(User)
      JSON::parse(resp.body)['name'] == nil
      JSON::parse(resp.body)['email'] == nil
    end
  end

  describe "GET edit" do
    it "assigns the requested user as @user" do
      user = User.create! valid_attributes
      get :edit, {:id => user.to_param}, valid_session
      assigns(:user).should eq(user)
    end
  end

  describe "POST create" do
    describe "with valid params" do
        it "creates a new User" do
          expect {
            post :create, {:user => {name: "Test1", email: "test1@gmail.com"}, format: "json"}, valid_session
          }.to change(User, :count).by(1)
          pp JSON::parse(@resp.body).to_s
        end

        it "assigns a newly created user as @user" do
        post :create, {:user => valid_attributes}, valid_session
        assigns(:user).should be_a(User)
        assigns(:user).should be_persisted
      end

      it "redirects to the created user" do
        post :create, {:user => valid_attributes}, valid_session
        response.should redirect_to(User.last)
      end
    end

    describe "with invalid params" do
      it "does not create a new User" do
        expect {
          @resp = post :create, {:user => {}, format: "json"}, valid_session
        }.to change(User, :count).by(0)
        pp JSON::parse(@resp.body).to_s
      end

      it "assigns a newly created but unsaved user as @user" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        assigns(:user).should be_a_new(User)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        post :create, {:user => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested user" do
        user = User.create! valid_attributes
        # Assuming there are no other users in the database, this
        # specifies that the User created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        User.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => user.to_param, :user => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested user as @user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        assigns(:user).should eq(user)
      end

      it "redirects to the user" do
        user = User.create! valid_attributes
        put :update, {:id => user.to_param, :user => valid_attributes}, valid_session
        response.should redirect_to(user)
      end
    end

    describe "with invalid params" do
      it "assigns the user as @user" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        assigns(:user).should eq(user)
      end

      it "re-renders the 'edit' template" do
        user = User.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        User.any_instance.stub(:save).and_return(false)
        put :update, {:id => user.to_param, :user => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes
      expect {
        delete :destroy, {:id => user.to_param}, valid_session
      }.to change(User, :count).by(-1)
      User.count.should == 0
    end

    it "redirects to the users list" do
      user = User.create! valid_attributes
      delete :destroy, {:id => user.to_param}, valid_session
      response.should redirect_to(users_url)
    end
  end

 end
